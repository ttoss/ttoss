// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SDL should always match snapshot 1`] = `
"type Query {
  """Fetches an object that has globally unique ID among all types"""
  node(
    """The globally unique ID among all types"""
    id: ID!
  ): Node

  """Find a author by global ID. Used by node interface."""
  author(id: ID!): Author
  authors(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Sort argument for data ordering"""
    sort: SortConnectionAuthorEnum = ASC
  ): AuthorConnection

  """Find a book by global ID. Used by node interface."""
  book(id: ID!): Book
  books(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Sort argument for data ordering"""
    sort: SortConnectionBookEnum = ASC
  ): BookConnection
}

"""The \`Boolean\` scalar type represents \`true\` or \`false\`."""
scalar Boolean

"""
The \`ID\` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \`"4"\`) or integer (such as \`4\`) input value will be accepted as an ID.
"""
scalar ID

"""
The \`Int\` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The \`String\` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The \`String\` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum SortConnectionAuthorEnum {
  ASC
}

enum SortConnectionBookEnum {
  ASC
}

"""
An object, that can be fetched by the globally unique ID among all types.
"""
interface Node {
  """The globally unique ID among all types."""
  id: ID!
}

type Author implements Node {
  """The globally unique ID among all types"""
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type AuthorConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [AuthorEdge!]!
}

"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge"""
  node: Author!

  """A cursor for use in pagination"""
  cursor: String!
}

type Book implements Node {
  """The globally unique ID among all types"""
  id: ID!
  title: String!
  authorId: String!

  """Find a author by global ID. Used by node interface."""
  author: Author
}

"""A connection to a list of items."""
type BookConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [BookEdge!]!
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge"""
  node: Book!

  """A cursor for use in pagination"""
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}"
`;
